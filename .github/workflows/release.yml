name: Build and Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            architecture: amd64
          - os: ubuntu-latest
            architecture: arm64
          - os: windows-latest
            architecture: amd64
          - os: macos-latest
            architecture: x86_64
          - os: macos-latest
            architecture: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install PyInstaller
      run: pip install pyinstaller

    # Linux x86_64
    - name: Build binary with PyInstaller for Linux x86_64
      if: matrix.os == 'ubuntu-latest' && matrix.architecture == 'amd64'
      run: |
        pyinstaller --onefile --icon=assets/icons/myicon.png melaninclick_linux.py
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        ./appimagetool-x86_64.AppImage dist/melaninclick_linux
        mv melaninclick_linux.AppImage dist/melaninclick-linux-x86_64.AppImage

    # Linux ARM64
    - name: Build binary with PyInstaller for Linux ARM64
      if: matrix.os == 'ubuntu-latest' && matrix.architecture == 'arm64'
      run: |
        pyinstaller --onefile --icon=assets/icons/myicon.png melaninclick_linux.py
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage
        chmod +x appimagetool-aarch64.AppImage
        ./appimagetool-aarch64.AppImage dist/melaninclick_linux
        mv melaninclick_linux.AppImage dist/melaninclick-linux-arm64.AppImage

    # macOS x86_64
    - name: Build binary with PyInstaller for macOS x86_64
      if: matrix.os == 'macos-latest' && matrix.architecture == 'x86_64'
      run: |
        pyinstaller --onefile --icon=assets/icons/myicon.icns melaninclick_macos.py
        hdiutil create dist/melaninclick.dmg -volname "MelaninClick" -srcfolder dist/melaninclick_macos

    # macOS ARM64
    - name: Build binary with PyInstaller for macOS ARM64
      if: matrix.os == 'macos-latest' && matrix.architecture == 'arm64'
      run: |
        pyinstaller --onefile --icon=assets/icons/myicon.icns melaninclick_macos.py
        hdiutil create dist/melaninclick-arm64.dmg -volname "MelaninClick" -srcfolder dist/melaninclick_macos

    # Windows x86_64
    - name: Build binary with PyInstaller for Windows x86_64
      if: matrix.os == 'windows-latest' && matrix.architecture == 'amd64'
      run: pyinstaller --onefile --icon=assets/icons/myicon.ico melaninclick_windows.py

    # Create Release
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        gh release create ${{ github.ref }} \
          --title "Release ${{ github.ref }}" \
          --notes "Automated release of ${{ github.ref }}"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Set the token for gh

    # Upload Linux Assets
    - name: Upload Linux Assets
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/melaninclick-linux-${{ matrix.architecture }}.AppImage
        asset_name: melaninclick-${{ github.ref }}-linux-${{ matrix.architecture }}.AppImage
        asset_content_type: application/octet-stream

    # Upload macOS Assets
    - name: Upload macOS Assets
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'macos-latest'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/melaninclick-${{ matrix.architecture }}.dmg
        asset_name: melaninclick-${{ github.ref }}-macos-${{ matrix.architecture }}.dmg
        asset_content_type: application/octet-stream

    # Upload Windows Assets
    - name: Upload Windows Assets
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/melaninclick_windows.exe
        asset_name: melaninclick-${{ github.ref }}-windows-x86_64.exe
        asset_content_type: application/octet-stream
