name: Release Builds

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  
jobs:
  build:
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            rust-target: 'x86_64-pc-windows-msvc'
            arch: 'x64'
          
          # macOS builds
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            rust-target: 'x86_64-apple-darwin'
            arch: 'x64'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            rust-target: 'aarch64-apple-darwin'
            arch: 'arm64'
          
          # Linux builds
          - platform: 'ubuntu-22.04'
            args: '--target x86_64-unknown-linux-gnu'
            rust-target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: melanin_click_tauri/package-lock.json

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './melanin_click_tauri/src-tauri -> target'

      # Linux-specific dependencies
      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libwebkit2gtk-4.0-dev \
            libgtk-3-dev \
            librsvg2-dev \
            patchelf \
            libayatana-appindicator3-dev

      # Windows-specific setup
      - name: Setup Windows build environment
        if: matrix.platform == 'windows-latest'
        run: |
          # Ensure we have the Windows SDK
          echo "Setting up Windows build environment"

      # macOS-specific setup
      - name: Setup macOS build environment
        if: matrix.platform == 'macos-latest'
        run: |
          # Ensure we have Xcode command line tools
          xcode-select --install 2>/dev/null || true

      - name: Install frontend dependencies
        working-directory: melanin_click_tauri
        run: npm ci

      - name: Create environment file
        run: |
          cp .env.example .env
          echo "BITCOIN_RPC_PASSWORD=ci_build_password_secure" >> .env
          echo "WHIVE_RPC_PASSWORD=ci_build_whive_secure" >> .env
          echo "APP_SECRET_KEY=ci_build_key_32_chars_long_test" >> .env

      - name: Build frontend
        working-directory: melanin_click_tauri
        run: npm run build

      - name: Build Tauri app
        working-directory: melanin_click_tauri
        run: npm run tauri build -- ${{ matrix.args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Disable code signing for now to avoid certificate issues
          TAURI_SIGNING_PRIVATE_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: melanin-click-windows-${{ matrix.arch }}
          path: |
            melanin_click_tauri/src-tauri/target/${{ matrix.rust-target }}/release/bundle/msi/*.msi
            melanin_click_tauri/src-tauri/target/${{ matrix.rust-target }}/release/bundle/nsis/*.exe

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: melanin-click-macos-${{ matrix.arch }}
          path: |
            melanin_click_tauri/src-tauri/target/${{ matrix.rust-target }}/release/bundle/dmg/*.dmg
            melanin_click_tauri/src-tauri/target/${{ matrix.rust-target }}/release/bundle/macos/*.app

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: melanin-click-linux-${{ matrix.arch }}
          path: |
            melanin_click_tauri/src-tauri/target/${{ matrix.rust-target }}/release/bundle/deb/*.deb
            melanin_click_tauri/src-tauri/target/${{ matrix.rust-target }}/release/bundle/appimage/*.AppImage
            melanin_click_tauri/src-tauri/target/${{ matrix.rust-target }}/release/bundle/tar.gz/*.tar.gz

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.msi
            artifacts/**/*.exe
            artifacts/**/*.dmg
            artifacts/**/*.deb
            artifacts/**/*.AppImage
            artifacts/**/*.tar.gz
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Melanin Click Release ${{ github.ref_name }}
            
            ### Downloads
            
            **Windows:**
            - `.msi` - Windows installer package
            - `.exe` - Portable Windows executable
            
            **macOS:**
            - `.dmg` - macOS installer (Intel x64 and Apple Silicon ARM64)
            
            **Linux:**
            - `.deb` - Debian/Ubuntu package
            - `.AppImage` - Portable Linux application
            - `.tar.gz` - Archive for other Linux distributions
            
            ### Installation
            
            See [INSTALL.md](https://github.com/xyephy/melanin_click/blob/main/INSTALL.md) for detailed installation instructions.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}