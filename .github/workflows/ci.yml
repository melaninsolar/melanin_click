name: Cross-Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  # Required environment variables for security
  BITCOIN_RPC_PASSWORD: "ci_test_password_2024_secure_x9K3m7N2p8Q5"
  WHIVE_RPC_PASSWORD: "ci_test_whive_password_2024_secure_y4T8n6M1q9R7"
  APP_SECRET_KEY: "ci_test_app_secret_2024_32_chars_long_key"

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20]
        rust-version: [stable]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: melanin_click_tauri/package-lock.json

    - name: Setup Rust ${{ matrix.rust-version }}
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust-version }}
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          melanin_click_tauri/src-tauri/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Install dependencies
      working-directory: melanin_click_tauri
      run: npm ci

    - name: Create .env file for testing
      run: |
        cp .env.example .env
        echo "BITCOIN_RPC_PASSWORD=${{ env.BITCOIN_RPC_PASSWORD }}" >> .env
        echo "WHIVE_RPC_PASSWORD=${{ env.WHIVE_RPC_PASSWORD }}" >> .env
        echo "APP_SECRET_KEY=${{ env.APP_SECRET_KEY }}" >> .env

    - name: Run Rust tests
      working-directory: melanin_click_tauri/src-tauri
      run: |
        cargo test --verbose
        cargo clippy -- -D warnings
        cargo fmt -- --check

    - name: Run TypeScript checks
      working-directory: melanin_click_tauri
      run: |
        npm run type-check || npx tsc --noEmit

    - name: Run linting
      working-directory: melanin_click_tauri
      run: |
        npm run lint || echo "Lint script not found, skipping"

    - name: Build application
      working-directory: melanin_click_tauri
      run: |
        npm run tauri build -- --debug
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

    - name: Run integration tests
      run: |
        chmod +x tests/run_tests.sh
        ./tests/run_tests.sh

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      working-directory: melanin_click_tauri/src-tauri
      run: cargo audit

    - name: Check for hardcoded secrets
      run: |
        if grep -r "password.*=" --include="*.rs" --include="*.ts" --include="*.js" --exclude-dir=node_modules --exclude-dir=target . | grep -v test | grep -v ci.yml | grep -v "rpcpassword={}"; then
          echo "❌ Found potential hardcoded passwords"
          exit 1
        else
          echo "✅ No hardcoded passwords found"
        fi

  release:
    name: Release Build
    needs: [test, security-audit]
    if: github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: melanin_click_tauri/package-lock.json

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Install dependencies
      working-directory: melanin_click_tauri
      run: npm ci

    - name: Create production .env
      run: |
        cp .env.example .env
        echo "BITCOIN_RPC_PASSWORD=${{ secrets.BITCOIN_RPC_PASSWORD }}" >> .env
        echo "WHIVE_RPC_PASSWORD=${{ secrets.WHIVE_RPC_PASSWORD }}" >> .env
        echo "APP_SECRET_KEY=${{ secrets.APP_SECRET_KEY }}" >> .env

    - name: Build release
      working-directory: melanin_click_tauri
      run: npm run tauri build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: melanin-click-${{ matrix.os }}
        path: |
          melanin_click_tauri/src-tauri/target/release/bundle/
        retention-days: 30
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation completeness
      run: |
        echo "Checking documentation files..."
        required_files=("README.md" "INSTALL.md" "TODO.md" "STARTUP_GUIDE.md" "LICENSE")
        
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "❌ Missing: $file"
            exit 1
          elif [[ ! -s "$file" ]]; then
            echo "❌ Empty: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done
        
        echo "All documentation files present and non-empty"